Program name			ircserv

Turn in files			Makefile, *.{h, hpp}, *.cpp, *.tpp, *.ipp, an optional configuration file

Makefile				NAME, all, clean, fclean, re

Arguments				port: The listening port
						password: The connection password

External functs.		Everything in C++ 98. 
socket, close, setsockopt, getsockname, getprotobyname, gethostbyname, getaddrinfo,
freeaddrinfo, bind, connect, listen, accept, htons, htonl, ntohs, ntohl, inet_addr,
inet_ntoa, send, recv, signal, sigaction, lseek, fstat, fcntl, poll(or equivalent)
socket() : Crée un nouveau point de terminaison de communication (socket).

close() : Ferme un descripteur de fichier ou une socket.
setsockopt() : Modifie les options associées à une socket.
getsockname() : Obtient le nom local associé à une socket.
getprotobyname() : Obtient les informations du protocole à partir de son nom.
gethostbyname() : Obtient les informations de l'hôte à partir de son nom.
getaddrinfo() : Obtient les informations d'adresse de socket.
freeaddrinfo() : Libère la mémoire allouée par la fonction getaddrinfo().
bind() : Associe une adresse à une socket.
connect() : Établit une connexion avec une autre socket.
listen() : Met en écoute une socket pour les connexions entrantes.
accept() : Accepte une connexion sur une socket.
htons() : Convertit un entier court (short) depuis l'ordre d'octets de l'hôte vers celui du réseau.
htonl() : Convertit un entier long (long) depuis l'ordre d'octets de l'hôte vers celui du réseau.
ntohs() : Convertit un entier court (short) depuis l'ordre d'octets du réseau vers celui de l'hôte.
ntohl() : Convertit un entier long (long) depuis l'ordre d'octets du réseau vers celui de l'hôte.
inet_addr() : Convertit une chaîne de caractères représentant une adresse IPv4 en format binaire.
inet_ntoa() : Convertit une adresse IPv4 binaire en une chaîne de caractères.
send() : Envoie des données sur une socket.
recv() : Reçoit des données depuis une socket.
signal() : Associe un gestionnaire de signal à un signal spécifique.
sigaction() : Permet de modifier le comportement d'un signal.
lseek() : Déplace le curseur de lecture/écriture dans un fichier.
fstat() : Obtient les informations sur un descripteur de fichier.
fcntl() : Effectue diverses opérations sur un descripteur de fichier.
poll() (ou équivalent) : Permet de surveiller plusieurs descripteurs de fichiers pour les entrées/sorties.

Libft authorized		n/a

Description				An IRC server in C++ 98

You have to develop an IRC server in C++ 98.

You mustn’t develop a client.
You mustn’t handle server-to-server communication.

Your executable will be run as follows:
	./ircserv <port> <password>

	• port: The port number on which your IRC server will be listening to for incoming IRC connections.

	• password: The connection password. It will be needed by any IRC client that tries to connect to your server.

		Even if poll() is mentionned in the subject and the evaluation scale, you can use any equivalent such as select(), kqueue(), or epoll().

III.1 Requirements
	• The server must be capable of handling multiple clients at the same time and never hang.
	• Forking is not allowed. All I/O operations must be non-blocking.
	• Only 1 poll() (or equivalent) can be used for handling all these operations (read, write, but also listen, and so forth).

		Because you have to use non-blocking file descriptors, it is possible to use read/recv or write/send functions with no poll() (or equivalent), and your server wouldn’t be blocking.
		But it would consume more system resources.
		Thus, if you try to read/recv or write/send in any file descriptor without using poll() (or equivalent), your grade will be 0.
	
	• Several IRC clients exist. You have to choose one of them as a reference. Your reference client will be used during the evaluation process.
	• Your reference client must be able to connect to your server without encountering any error.
	• Communication between client and server has to be done via TCP/IP (v4 or v6).
	• Using your reference client with your server must be similar to using it with any official IRC server. However, you only have to implement the following features:
	◦ You must be able to authenticate, set a nickname, a username, join a channel, send and receive private messages using your reference client.
	◦ All the messages sent from one client to a channel have to be forwarded to every other client that joined the channel.
	◦ You must have operators and regular users.
	◦ Then, you have to implement the commands that are specific to channel operators:
	∗ KICK - Eject a client from the channel
	∗ INVITE - Invite a client to a channel
	∗ TOPIC - Change or view the channel topic
	∗ MODE - Change the channel’s mode:
	· i: Set/remove Invite-only channel
	· t: Set/remove the restrictions of the TOPIC command to channel operators
	· k: Set/remove the channel key (password)
	· o: Give/take channel operator privilege
	· l: Set/remove the user limit to channel
	• Of course, you are expected to write a clean code.

III.2 For MacOS only
		Since MacOS doesn’t implement write() the same way as other Unix OSes, you are allowed to use fcntl().
		You must use file descriptors in non-blocking mode in order to get a behavior similar to the one of other Unix OSes.

		However, you are allowed to use fcntl() only as follows:
		fcntl(fd, F_SETFL, O_NONBLOCK);
		Any other flag is forbidden.

III.3 Test example
Verify absolutely every possible error and issue (receiving partial data, low bandwidth, and so forth).
To ensure that your server correctly processes everything that you send to it, the following simple test using nc can be done:
\$> nc 127.0.0.1 6667
com^Dman^Dd
\$>
Use ctrl+D to send the command in several parts: ’com’, then ’man’, then ’d\n’.
In order to process a command, you have to first aggregate the received packets in order to rebuild it.

Chapter IV
Bonus part
Here are the extra features you can add to your IRC server so it looks even more like and actual IRC server:
	• Handle file transfer.
	• A bot.